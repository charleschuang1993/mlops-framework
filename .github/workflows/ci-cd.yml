name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: mlflow
          POSTGRES_PASSWORD: mlflow
          POSTGRES_DB: mlflow
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt
    
    - name: Run tests with pytest
      env:
        MLFLOW_TRACKING_URI: http://localhost:5000
      run: |
        pytest tests/ -v --cov=src/ --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  deploy:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push API image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./serving/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/iris-classifier-api:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/iris-classifier-api:${{ github.sha }}
          ${{ github.ref_type == 'tag' && format('{0}/iris-classifier-api:{1}', secrets.DOCKERHUB_USERNAME, github.ref_name) || '' }}
    
    # 這裡可以加入部署到雲端的步驟
    - name: Deploy to Production (Example)
      if: success()
      run: |
        echo "Deployment would happen here"
        # 例如: kubectl apply -f k8s/deployment.yml
